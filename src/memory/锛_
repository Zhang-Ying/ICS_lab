#include "common.h"
#include "lib/misc.h"
#include <time.h>

/*This is my cache design*/

uint32_t dram_read(hwaddr_t addr, size_t len);
void dram_write(hwaddr_t addr, size_t len, uint32_t data);

#define CACHE_BYTE 16
#define CACHE_BLOCK_BYTE 6
#define INDEX (CACHE_BYTE-CACHE_BLOCK_BYTE-3)
#define BLOCK_OFFSET CACHE_BLOCK_BYTE 
#define TAG (32-INDEX-BLOCK_OFFSET)

typedef struct{
	bool valid;
	uint32_t tag : TAG;
	uint32_t data[1<<BLOCK_OFFSET];
}CC;

#define GROUP_INDEX (1<<INDEX)
#define WAYS 8

CC cachemem[GROUP_INDEX][WAYS];

static int rand(){                             /*To create a random number between 0-(WAYS-1)*/
 	int r;
	r=time(NULL);
	r=(r*29+37)%WAYS;
	printf("%d\n",r);
	return r;
}

uint32_t cache_read(hwaddr_t addr,size_t len){
	uint32_t gi;
	uint32_t t;
	uint32_t off;
	uint32_t count;
	gi=(addr&0x1fc0)>>6;
    t=(addr&0xffffe000)>>13;
	off=addr&0x3f;
	for(count=0;count<WAYS;count++){
		if(cachemem[gi][count].valid==1&&cachemem[gi][count].tag==t){
			if(len==1){
				assert(cachemem[gi][count].data[off]==dram_read(addr,1));
				return cachemem[gi][count].data[off];
			}
			else if(len==2){
				assert(cachemem[gi][count].data[off]+(cachemem[gi][count].data[off+1]<<8)==dram_read(addr,2));
				return cachemem[gi][count].data[off]+(cachemem[gi][count].data[off+1]<<8);
			}
			else{
				assert(cachemem[gi][count].data[off]+(cachemem[gi][count].data[off+1]<<8)+(cachemem[gi][count].data[off+2]<<16)+(cachemem[gi][count].data[off+3]<<24)==dram_read(addr,4));
				return cachemem[gi][count].data[off]+(cachemem[gi][count].data[off+1]<<8)+(cachemem[gi][count].data[off+2]<<16)+(cachemem[gi][count].data[off+3]<<24);
				}
		}
	}
	return -1;
}

bool cache_write(hwaddr_t addr, size_t len, uint32_t data){
	uint32_t gi;
	uint32_t t;
	uint32_t off;
	uint32_t count;
	gi=(addr&0x1fc0)>>6;
	t=(addr&0xffffe000)>>13;
	off=addr&0x3f;	 
	for(count=0;count<WAYS;count++){ 
		if(cachemem[gi][count].valid==1&&cachemem[gi][count].tag==t){
//			printf("Hit!\n");
//			printf("0x%x\n",data);
//			assert(gi!=6||t!=0x80||count!=0);
			if(len==1)
				cachemem[gi][count].data[off]=data;
			else if(len==2){
				cachemem[gi][count].data[off]=data&0xff;
				cachemem[gi][count].data[off+1]=(data&0xff00)>>8;
			}
			else{
				cachemem[gi][count].data[off]=data&0xff;
				cachemem[gi][count].data[off+1]=(data&0xff00)>>8;
				cachemem[gi][count].data[off+2]=(data&0xff0000)>>16;
				cachemem[gi][count].data[off+3]=(data&0xff000000)>>24;
			}
			dram_write(addr,len,data);
			return true;
		}
	}
//	printf("Miss!\n");
	return false;
}

void init_cache(){
	int i;
	int j;
	for(i=0;i<GROUP_INDEX;i++)
		for(j=0;j<WAYS;j++)
			cachemem[i][j].valid=0;
}

void load_cache(hwaddr_t addr){
	uint32_t gi;
	uint32_t t;
	uint32_t count;
	int i;
	gi=(addr&0x1fc0)>>6;
	t=(addr&0xffffe000)>>13;
	for(count=0;count<WAYS;count++)
		if(cachemem[gi][count].valid==0)
			break;
	if(count==WAYS&&cachemem[gi][count-1].valid==1)
		count=rand();
   	printf("addr=0x%x\n",addr); 
	printf("0x%x\n",dram_read(addr,1));
	assert(gi!=6||t!=0x80||count!=0);
	cachemem[gi][count].tag=t;
	cachemem[gi][count].valid=1;
	for(i=0;i<(1<<BLOCK_OFFSET);i++){
		cachemem[gi][count].data[i]=dram_read((addr&0xffffffc0)+i,1);
	}
}



