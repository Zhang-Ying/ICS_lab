#include "common.h"
#include "lib/misc.h"
#include <time.h>

/*This is my cache design*/

uint32_t dram_read(hwaddr_t addr, size_t len);
void dram_write(hwaddr_t addr, size_t len, uint32_t data);

#define CACHE_BYTE 16
#define CACHE_BLOCK_BYTE 6
#define INDEX (CACHE_BYTE-CACHE_BLOCK_BYTE-3)
#define BLOCK_OFFSET CACHE_BLOCK_BYTE 
#define TAG (32-INDEX-BLOCK_OFFSET)

typedef struct{
	bool valid;
	uint32_t tag : TAG;
	uint32_t data: BLOCK_OFFSET;
}CC;

#define GROUP_INDEX (1<<INDEX)
#define WAYS 8

CC cachemem[GROUP_INDEX][WAYS];

int rand(){                             /*To create a random number between 0-(WAYS-1)*/
 	int r;
	r=time(NULL);
	r=(r*29+37)%WAYS;
}

uint32_t cache_read(hwaddr_t addr,size_t len){
	uint32_t gi;
	uint32_t t;
	uint32_t count;
	gi=addr&0x1fc0;
    t=addr&0xffffe000;
	for(count=0;count<WAYS;count++){
		if(cachemem[gi][count].valid==1&&cachemem[gi][count].tag==t){
			printf("Hit!\n");
			return cachemem[gi][count].data;
		}
	}
	printf("Miss!\n");
	return -1;
}

bool cache_write(hwaddr_t addr, size_t len, uint32_t data){
	uint32_t gi;
	uint32_t t;
	uint32_t count;
	gi=addr&0x1fc0;
	t=addr&0xffffe000;
	for(count=0;count<WAYS;count++){ 
		if(cachemem[gi][count].valid==1&&cachemem[gi][count].tag==t){
			printf("Hit!\n");
			cachemem[gi][count].data=data;
			dram_write(addr,len,data);
			return true;
		}
	}
	printf("Miss!\n");
	return false;
}

void init_cache(){
	int i;
	int j;
	for(i=0;i<GROUP_INDEX;i++)
		for(j=0;j<WAYS;j++)
			cachemem[i][j].valid=0;
}

void load_cache(hwaddr_t addr){
	uint32_t gi;
	uint32_t t;
	uint32_t count;
	gi=addr&0x1fc0;
	t=addr&0xffffe000;
	for(count=0;count<WAYS;count++)
		if(cachemem[gi][count].valid==1)
			count++
	if(count==WAYS&&cachemem[gi][count-1].valid==1){
		count=rand();
		cachemem[gi][count].valid=0;
	}		
	cachemem[gi][count].data=dram_read(addr,4);
	cachemem[gi][count].tag=t;
}



